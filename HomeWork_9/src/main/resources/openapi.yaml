openapi: 3.0.0
info:
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: OpenAPI спецификация каталога детских игрушек
  version: 0.0.1
servers:
- description: Dev server
  url: http://localhost:8080/api/v1/
paths:
  /toys:
    get:
      description: "Метод предназначен для получения списка всех игрушек, сохранен\
        ных в БД."
      operationId: getToys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toys'
          description: Список игрушек
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Любая неожиданная ошибка
      summary: Метод получения игрушек
      tags:
      - Toy
      x-accepts: application/json
      x-tags:
      - tag: Toy
    post:
      description: Метод предназначен для сохранения в БД данных по новой игрушке.
      operationId: createToy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toy'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
          description: Подтверждение успешного сохранения
        "400":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Некорректные входные данные. Возвращает список атрибутов с
            ошибками
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Любая неожиданная ошибка
      summary: Метод добавления новой игрушки в каталог
      tags:
      - Toy
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: Toy
  /toys/{id}:
    delete:
      operationId: deleteToyById
      parameters:
      - description: Идентификатор игрушки
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json: {}
          description: Успешное удаление
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Любая неожиданная ошибка
      summary: Метод удаления игрушки по идентификатору
      tags:
      - Toy
      x-accepts: application/json
      x-tags:
      - tag: Toy
    get:
      operationId: getToyById
      parameters:
      - description: Идентификатор игрушки
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
          description: Игрушка
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Любая неожиданная ошибка
      summary: Метод получения игрушки по идентификатору
      tags:
      - Toy
      x-accepts: application/json
      x-tags:
      - tag: Toy
    put:
      description: Метод предназначен для обновления в БД данных по имеющейся игрушке.
      operationId: updateToy
      parameters:
      - description: Идентификатор игрушки
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Toy'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
          description: Подтверждение успешного обновления
        "400":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Некорректные входные данные. Возвращает список атрибутов с
            ошибками
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Любая неожиданная ошибка
      summary: Метод обновления игрушки в каталоге
      tags:
      - Toy
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: Toy
  /toys/status/{status}:
    get:
      operationId: getToyByStatus
      parameters:
      - description: Статус (состояние) игрушки
        explode: false
        in: path
        name: status
        required: true
        schema:
          enum:
          - new
          - used
          - broken
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Toy'
          description: Игрушка
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Любая неожиданная ошибка
      summary: Метод получения игрушек по состоянию
      tags:
      - Toy
      x-accepts: application/json
      x-tags:
      - tag: Toy
components:
  schemas:
    Toy:
      example:
        note: Found on a street
        name: Train
        created_at: 2022-07-01T15:00:00+01
        toy_id: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
        status: new
      properties:
        toy_id:
          example: 42abcd2b-8b9c-4af9-88f7-0bc180cf74b4
          type: string
        name:
          description: Название игрушки
          example: Train
          type: string
        status:
          description: Статус (состояние) игрушки
          enum:
          - new
          - used
          - broken
          example: new
          type: string
        note:
          description: "Описание, пометки"
          example: Found on a street
          type: string
        created_at:
          description: Дата и время сохранения игрушки в каталоге
          example: 2022-07-01T15:00:00+01
          type: string
      required:
      - name
      - status
      type: object
    Toys:
      items:
        $ref: '#/components/schemas/Toy'
      type: array
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
