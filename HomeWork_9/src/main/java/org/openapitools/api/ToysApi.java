/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.Toy;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-19T15:14:41.617071088+07:00[Asia/Novosibirsk]")
@Validated
@Tag(name = "Toy", description = "the Toy API")
public interface ToysApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /toys : Метод добавления новой игрушки в каталог
     * Метод предназначен для сохранения в БД данных по новой игрушке.
     *
     * @param toy  (required)
     * @return Подтверждение успешного сохранения (status code 200)
     *         or Некорректные входные данные. Возвращает список атрибутов с ошибками (status code 400)
     *         or Любая неожиданная ошибка (status code 200)
     */
    @Operation(
        operationId = "createToy",
        summary = "Метод добавления новой игрушки в каталог",
        description = "Метод предназначен для сохранения в БД данных по новой игрушке.",
        tags = { "Toy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Подтверждение успешного сохранения", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Toy.class))
            }),
            @ApiResponse(responseCode = "400", description = "Некорректные входные данные. Возвращает список атрибутов с ошибками", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Любая неожиданная ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/toys",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Toy> createToy(
        @Parameter(name = "Toy", description = "", required = true) @Valid @RequestBody Toy toy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"Found on a street\", \"name\" : \"Train\", \"created_at\" : \"2022-07-01T15:00:00+01\", \"toy_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b4\", \"status\" : \"new\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /toys/{id} : Метод удаления игрушки по идентификатору
     *
     * @param id Идентификатор игрушки (required)
     * @return Успешное удаление (status code 200)
     *         or Любая неожиданная ошибка (status code 200)
     */
    @Operation(
        operationId = "deleteToyById",
        summary = "Метод удаления игрушки по идентификатору",
        tags = { "Toy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешное удаление"),
            @ApiResponse(responseCode = "default", description = "Любая неожиданная ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/toys/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteToyById(
        @Parameter(name = "id", description = "Идентификатор игрушки", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /toys/{id} : Метод получения игрушки по идентификатору
     *
     * @param id Идентификатор игрушки (required)
     * @return Игрушка (status code 200)
     *         or Любая неожиданная ошибка (status code 200)
     */
    @Operation(
        operationId = "getToyById",
        summary = "Метод получения игрушки по идентификатору",
        tags = { "Toy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Игрушка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Toy.class))
            }),
            @ApiResponse(responseCode = "default", description = "Любая неожиданная ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/toys/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Toy> getToyById(
        @Parameter(name = "id", description = "Идентификатор игрушки", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"Found on a street\", \"name\" : \"Train\", \"created_at\" : \"2022-07-01T15:00:00+01\", \"toy_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b4\", \"status\" : \"new\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /toys/status/{status} : Метод получения игрушек по состоянию
     *
     * @param status Статус (состояние) игрушки (required)
     * @return Игрушка (status code 200)
     *         or Любая неожиданная ошибка (status code 200)
     */
    @Operation(
        operationId = "getToyByStatus",
        summary = "Метод получения игрушек по состоянию",
        tags = { "Toy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Игрушка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Toy.class))
            }),
            @ApiResponse(responseCode = "default", description = "Любая неожиданная ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/toys/status/{status}",
        produces = { "application/json" }
    )
    default ResponseEntity<Toy> getToyByStatus(
        @Parameter(name = "status", description = "Статус (состояние) игрушки", required = true, in = ParameterIn.PATH) @PathVariable("status") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"Found on a street\", \"name\" : \"Train\", \"created_at\" : \"2022-07-01T15:00:00+01\", \"toy_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b4\", \"status\" : \"new\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /toys : Метод получения игрушек
     * Метод предназначен для получения списка всех игрушек, сохраненных в БД.
     *
     * @return Список игрушек (status code 200)
     *         or Любая неожиданная ошибка (status code 200)
     */
    @Operation(
        operationId = "getToys",
        summary = "Метод получения игрушек",
        description = "Метод предназначен для получения списка всех игрушек, сохраненных в БД.",
        tags = { "Toy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список игрушек", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Toy.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Любая неожиданная ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/toys",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Toy>> getToys(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"note\" : \"Found on a street\", \"name\" : \"Train\", \"created_at\" : \"2022-07-01T15:00:00+01\", \"toy_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b4\", \"status\" : \"new\" }, { \"note\" : \"Found on a street\", \"name\" : \"Train\", \"created_at\" : \"2022-07-01T15:00:00+01\", \"toy_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b4\", \"status\" : \"new\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /toys/{id} : Метод обновления игрушки в каталоге
     * Метод предназначен для обновления в БД данных по имеющейся игрушке.
     *
     * @param id Идентификатор игрушки (required)
     * @param toy  (required)
     * @return Подтверждение успешного обновления (status code 200)
     *         or Некорректные входные данные. Возвращает список атрибутов с ошибками (status code 400)
     *         or Любая неожиданная ошибка (status code 200)
     */
    @Operation(
        operationId = "updateToy",
        summary = "Метод обновления игрушки в каталоге",
        description = "Метод предназначен для обновления в БД данных по имеющейся игрушке.",
        tags = { "Toy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Подтверждение успешного обновления", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Toy.class))
            }),
            @ApiResponse(responseCode = "400", description = "Некорректные входные данные. Возвращает список атрибутов с ошибками", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "default", description = "Любая неожиданная ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/toys/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Toy> updateToy(
        @Parameter(name = "id", description = "Идентификатор игрушки", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Toy", description = "", required = true) @Valid @RequestBody Toy toy
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"note\" : \"Found on a street\", \"name\" : \"Train\", \"created_at\" : \"2022-07-01T15:00:00+01\", \"toy_id\" : \"42abcd2b-8b9c-4af9-88f7-0bc180cf74b4\", \"status\" : \"new\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
