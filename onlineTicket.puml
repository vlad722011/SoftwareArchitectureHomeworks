@startuml

' Интерфейсы
interface UserActions {
  +authorize(username: String, password: String): boolean
  +selectRoute(routeId: String, time: DateTime): boolean
  +checkTicketAvailability(): boolean
  +checkFunds(): boolean
}
UserActions <|.. User

interface TicketActions {
  +reserveTicket(): boolean
  +deductFunds(): boolean
  +confirmPurchase(): boolean
  +updateTicketAvailability(): void
  +cancelReservation(): boolean
}
TicketActions <|.. Ticket

' Классы и операции:

' Абстрактный класс "class Ticket" и его наследование

abstract class Ticket {
~ String routeId
~ Date departureTime
~ double price
}


' класс, представляющий пользователя системы.
class User implements UserActions {
' Приватное статическое поле thisUserName
- {static} String thisUserName
' Приватное статичесое поле passwordThisUser
- {static} String thisUserPassword
' Статическое булево поле isUserAutorize
~ {static} boolean isUserAutorize
' Статическое булево поле isRouteSelected
~ {static} boolean isRouteSelected
' Приватное поле thisUserFunds
- double thisUserFunds

+ {static} void setThisUserPassword(String)
+ void setThisUserFunds(double)
+ double getThisUserFunds()
+ String getThisUserName()
+ String getThisUserPassword()
+ void setThisUserName(String)
+ void setPasswordThisUser(String)
+ boolean authorize(String,String)
+ boolean selectRoute(String,Date)
+ boolean checkTicketAvailability(String,Date)
+ boolean checkFunds(double,double)
- boolean checkFunds()
- boolean checkTicketAvailability()
- boolean isRouteSelected()
- boolean isAuthorized()
- boolean performReservation()
+ boolean reserveTicket()
+ boolean deductFunds()
+ boolean confirmPurchase()
+ void updateTicketAvailability()
+ boolean cancelReservation()

' предусловия -->
  +authorize(username: String, password: String): boolean
  +selectRoute(routeId: String, time: DateTime): boolean
  +checkTicketAvailability(): boolean
  +checkFunds(): boolean
 ' <-- предусловия

 ' постусловия -->
  +reserveTicket(): boolean
  +deductFunds(): boolean
  +confirmPurchase(): boolean
  +updateTicketAvailability(): void
  +cancelReservation(): boolean
 ' <-- постусловия
}
User --|> BusTicket : uses


class BusTicket {
~ int number
+ {static} double getTicketPrice()
+ {static} int getCountTickets()
+ boolean reserveTicket()
+ boolean deductFunds()
+ boolean confirmPurchase()
+ void updateTicketAvailability()
+ boolean cancelReservation()
}
BusTicket --|> Ticket : extends

class Main {
+ {static} void main(String[])
}

' Предусловия
User --> User : authorize(username, password)
User --> User : selectRoute(routeId, time)
User --> User : checkTicketAvailability()
User --> User : checkFunds()

' Постусловия
User --> User : confirmPurchase()
User --> BusTicket : reserveTicket()
User --> User : deductFunds()
User --> BusTicket : Proof of Purchase()
User --> BusTicket : updateTicketAvailability()
User --> User : cancelReservation()

' Инварианты
User --> User : [invariant] Funds >= busTicket.price
BusTicket --> BusTicket : [invariant] Price > 0
Ticket --> Ticket : [invariant] Price > 0


Main --> User : в классе Main создаются пользователи


@enduml