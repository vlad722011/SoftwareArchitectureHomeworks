@startuml

'ОПРЕДЕЛЕНИЕ КЛАССОВ И ИНТЕРФЕЙСОВ

interface SOLID.users.SaveReportForUser {
~ User user
~ List<UsersSkills> userSkills
~ void save(User,List<UsersSkills>)
}
abstract class SOLID.users.UsersSkills {
- User user
~ {abstract}void add()
}
class SOLID.users.Hardworking {
- User user
~ List<UsersSkills> userSkills
~ void add()
+ String toString()
}
class SOLID.users.ReportForUser {
- User user
~ List<UsersSkills> userSkills
+ void save(User,List<UsersSkills>)
}
class SOLID.users.Loafer {
- User user
~ List<UsersSkills> userSkills
~ void add()
+ String toString()
}
class SOLID.users.Main {
+ {static} void main(String[])
}
class SOLID.users.Persister {
- User user
~ List<UsersSkills> userSkills
~ void add()
+ String toString()
}
class SOLID.users.User {
- String name
+ String getName()
}

' РЕАЛИЗАЦИЯ ИНТЕРФЕЙСА
SOLID.users.SaveReportForUser <|.. SOLID.users.ReportForUser : класс SaveReportForUser имлементирует интерфейс ReportForUser

' НАСЛЕДОВАНИЕ
SOLID.users.UsersSkills <|-- SOLID.users.Hardworking : extends
SOLID.users.UsersSkills <|-- SOLID.users.Loafer : extends
SOLID.users.UsersSkills <|-- SOLID.users.Persister : extends

' Ассоциация
User "1..~" -- "1..~" UsersSkills : пользователь может иметь навыки(много навыков), а может и не иметь.


Main --> User : в классе Main создаются пользователи
Main --> ReportForUser : в классе Main создаются характеристики на каждого пользователя
ReportForUser --> SaveReportForUser : создается отчет на пользователя

@enduml